<!doctype html>
<html lang="en">
 <head>
  <meta charset="UTF-8">
  <title>Document</title>
 </head>
 <body>
   <script>

/*******************去重******************/
var feng=[1,2,3,3,2,1,2];
Array.prototype.feng = function(){
	var res = [this[0]];
    for(var i = 1; i < this.length; i++){
	  var repeat = false;
		for(var j = 0; j < res.length; j++){
			if(this[i] == res[j]){
		    repeat = true;
			break;
			}
		}
	   if(!repeat){
	   res.push(this[i]);
	   }
    }
 return res;
}
console.log(feng.feng());

/****************去重*********************/
var arr=[1,2,3,3,2,1,2];
 var newArr = [];
	for(var i = 0; i < arr.length; i++){
		if(newArr.indexOf(arr[i]) == -1){
			newArr.push(arr[i]);
		}
	}
console.log(newArr);
	
/********************排序******************/
var dd=[4,2,4,6,8,4,2,1,9];
  dd.sort(function(a,b){return a-b;})
	console.log(dd);

/*****************死循环********************/
	//for(i=0;i<2;i=0){
	//	console.log(i);
	//}

/**************浏览器兼容问题***************/
1、css3   box-shadow 对于不同的浏览器，兼容问题的解决办法:
.box_shadow{ 
background-color: #eee; 
filter: progid:DXImageTransform.Microsoft.Shadow(color='#969696', Direction=135, Strength=5);/*for ie6,7,8*/ 
-moz-box-shadow:2px 2px 5px #969696;/*firefox*/ 
-webkit-box-shadow:2px 2px 5px #969696;/*webkit*/ 
box-shadow:2px 2px 5px #969696;/*opera或ie9*/ 
}

2、各个浏览器之间显示字体不一致的解决办法
统一设置全局字体：
body{font-family: '微软雅黑';}

3、去掉谷歌浏览器输入框内自带黄色背景
input:-webkit-autofill {-webkit-box-shadow: 0 0 0px 1000px white inset;}

4、去掉IE浏览器中输入框右边的小图标（叉号和眼睛）
 ::-ms-clear, ::-ms-reveal{display: none;}

5、去掉谷歌浏览器下输入框自带边框
 .class{outline:none}  
6、禁止表单的自动填充功能

autocomplete=”off”。
7、取消chrome下textarea可拖动放大
textarea{resize:none}

8、标签最低高度 min-height不兼容

因为min-height本身就是一个不兼容的css属性，所以正确的做法是：{min-height:200px; height:auto !important; height:200px; overflow:visible;}

9、 /* CSS hack*/ 

使用hacker我可以把浏览器分为3类：IE6 ；IE7和遨游；其他（IE8 chrome ff safari opera等）

◆IE6认识的hacker 是下划线_ 和星号 *

◆IE7 遨游认识的hacker是星号 *

比如这样一个CSS设置：

    height:300px;*height:200px;_height:100px; 

IE6浏览器在读到height:300px的时候会认为高时300px；继续往下读，他也认识*heihgt， 所以当IE6读到*height:200px的时候会覆盖掉前一条的相冲突设置，认为高度是200px。继续往下读，IE6还认识_height,所以他又会覆盖掉200px高的设置，把高度设置为100px；

IE7和遨游也是一样的从高度300px的设置往下读。当它们读到*height200px的时候就停下了，因为它们不认识_height。所以它们会把高度解析为200px，剩下的浏览器只认识第一个height:300px;所以他们会把高度解析为300px。因为优先级相同且想冲突的属性设置后一个会覆盖掉前一个，所以书写的次序是很重要的

10、不同浏览器默认的内边距和外边距不同

*{margin:0;padding:0;}

11、div用float布局后并且设置了margin属性的情况下，在ie6下margin比设置的要大

在float样式中加入display:inline;将其转化为行内元素

12、当给标签设置高度小于10px时，IE6，IE7，遨游高度会超出设置高度

给标签设置overflow:hidden;或者把line-height设置成小于本来要设置的高度（这个问题的原因是IE8之前的浏览器都会给一个默认的行高）

13、行内元素设置了display:block;后又用float布局并且设置了margin的情况下，ie6间距bug问题

在display:block;后加display:inline;display:table;

14、多个<img>放在同一行时，有些浏览器会出现图片之间有间隙的情况，加了通配符设置也不起作用

使用float为img布局

/*******************IE兼容性***************************/
第一类：块状元素float后，有添加了横向的margin，在IE6下比设置的值要大（属于双倍浮动的bug）

解决方案：给float标签添加display：inline，将其转换为行内元素



第二类：表单元素行高不一致

解决方案：给表单元素添加float：left（左浮动）；或者是vertical-align：middle；（垂直对齐方式：居中）



第三类：设置较小高度的容器（小于10px），在IE6下不识别小于10px的高度；

解决方案：给容器添加overflow：hidden；



第四类：当在a标签中嵌套img标签时，在某些浏览器中img会有蓝色边框；

解决方案：给img添加border：0；或者是border：none；



第五类：min-height在IE6下不兼容

解决方案：

1）min-height：value；

      _height：value；

2）min-height：value；

     height：auto！important；

     height：value；



第六类：图片默认有间隙

解决方案：

1）给img标签添加左浮动float：left；

2）给img标签添加display：block；



第七类：按钮默认大小不一

解决方案：

1）用a标签来模拟按钮，添加样式；

2）如果按钮是一张背景图片，那么直接给按钮添加背景图；



第八类：百分比的bug

解决方案：父元素宽度为100%，子元素宽度各为50%，在IE6下各个元素宽度之和超过100%

解决方案：给右边浮动的子元素添加clear：right；



第九类：鼠标指针bug

描述：cursor：hand；只有ie浏览器识别，其他浏览器不识别

解决方案：cursor：pointer；IE6以上浏览器及其他内核浏览器都识别；



第十类：透明度属性

解决方案：针对IE浏览器：filter：alpha（opacity=value）；（取值范围1--100）

兼容其他浏览器：opacity：value；（取值范围0--1）



第十一类：上下margin的重叠问题

描述：给上边元素设置了margin-bottom，给下边元素设置了margin-top，浏览器只会识别较大值；

解决方案：margin-top和margin-bottom中选择一个，只设置其中一个值；



关于hack


我很少使用hacker的，可能是个人习惯吧，我不喜欢写的代码IE不兼容，然后用hack来解决。不过hacker还是非常好用的。使用hacker我可以把浏览器分为3类：IE6 ；IE7和遨游；其他（IE8 chrome ff safari opera等）

◆IE6认识的hacker 是下划线_ 和星号 *

◆IE7 遨游认识的hacker是星号 *

比如这样一个CSS设置：

height:300px;*height:200px;_height:100px; 

IE6浏览器在读到height:300px的时候会认为高时300px；继续往下读，他也认识*heihgt， 所以当IE6读到*height:200px的时候会覆盖掉前一条的相冲突设置，认为高度是200px。继续往下读，IE6还认识_height,所以他又会覆盖掉200px高的设置，把高度设置为100px；

IE7和遨游也是一样的从高度300px的设置往下读。当它们读到*height200px的时候就停下了，因为它们不认识_height。所以它们会把高度解析为200px，剩下的浏览器只认识第一个height:300px;所以他们会把高度解析为300px。因为优先级相同且想冲突的属性设置后一个会覆盖掉前一个，所以书写的次序是很重要的。
/************************浏览器js兼容性********************************/

//以下均可console.log()实验
    var winW=document.body.clientWidth||document.docuemntElement.clientWidth;//网页可见区域宽
    var winH=document.body.clientHeight||document.docuemntElement.clientHeight;//网页可见区域宽
    //以上为不包括边框的宽高，如果是offsetWidth或者offsetHeight的话包括边框
    
    var winWW=document.body.scrollWidth||document.docuemntElement.scrollWidth;//整个网页的宽
    var winHH=document.body.scrollHeight||document.docuemntElement.scrollHeight;//整个网页的高

    var scrollHeight=document.body.scrollTop||document.docuemntElement.scrollTop;//网页被卷去的高
    var scrollLeft=document.body.scrollLeft||document.docuemntElement.scrollLeft;//网页左卷的距离

    var screenH=window.screen.height;//屏幕分辨率的高
    var screenW=window.screen.width;//屏幕分辨率的宽
    var screenX=window.screenLeft;//浏览器窗口相对于屏幕的x坐标（除了FireFox）
    var screenXX=window.screenX;//FireFox相对于屏幕的X坐标
    var screenY=window.screenTop;//浏览器窗口相对于屏幕的y坐标（除了FireFox）
    var screenYY=window.screenY;//FireFox相对于屏幕的y坐标
复制代码
event事件问题：

复制代码
//event事件问题
    document.onclick=function(ev){//谷歌火狐的写法，IE9以上支持，往下不支持；
        var e=ev;
        console.log(e);
    }
    document.onclick=function(){//谷歌和IE支持，火狐不支持；
        var e=event;
        console.log(e);
    }
    document.onclick=function(ev){//兼容写法；
        var e=ev||window.event;
        var mouseX=e.clientX;//鼠标X轴的坐标
        var mouseY=e.clientY;//鼠标Y轴的坐标
    }
复制代码
DOM节点相关的问题，我直接封装了函数，以便随时可以拿来使用：

复制代码
//DOM节点相关，主要兼容IE 6 7 8
    function nextnode(obj){//获取下一个兄弟节点
        if (obj.nextElementSibling) {
            return obj.nextElementSibling;
        } else{
            return obj.nextSibling;
        };
    }
    function prenode(obj){//获取上一个兄弟节点
        if (obj.previousElementSibling) {
            return obj.previousElementSibling;
        } else{
            return obj.previousSibling;
        };
    }
    function firstnode(obj){//获取第一个子节点
        if (obj.firstElementChild) {
            return obj.firstElementChild;//非IE678支持
        } else{
            return obj.firstChild;//IE678支持
        };
    }
    function lastnode(obj){//获取最后一个子节点
        if (obj.lastElementChild) {
            return obj.lastElementChild;//非IE678支持
        } else{
            return obj.lastChild;//IE678支持
        };
    }
复制代码
document.getElementsByClassName问题：

复制代码
//通过类名获取元素
    document.getElementsByClassName('');//IE 6 7 8不支持；

    //这里可以定义一个函数来解决兼容问题，当然别在这给我提jQuery...
    //第一个为全局获取类名，第二个为局部获取类名
    function byClass1(oClass){//全局获取，oClass为你想要查找的类名，没有“.”
        var tags=document.all?document.all:document.getElementsByTagName('*');
        var arr=[];
        for (var i = 0; i < tags.length; i++) {
            var reg=new RegExp('\\b'+oClass+'\\b','g');
            if (reg.test(tags[i].className)) {
                arr.push(tags[i]);
            };
        };
        return arr;//注意返回的也是数组，包含你传入的class所有元素；
    }

    function byClass2(parentID,oClass){//局部获取类名，parentID为你传入的父级ID
        var parent=document.getElementById(parentID);
        var tags=parent.all?parent.all:parent.getElementsByTagName('*');
        var arr=[];
        for (var i = 0; i < tags.length; i++) {
        var reg=new RegExp('\\b'+oClass+'\\b','g');
            if (reg.test(tags[i].className)) {
                arr.push(tags[i]);
            };
        };
        return arr;//注意返回的也是数组，包含你传入的class所有元素；
     }
复制代码
获取元素的非行间样式值：

复制代码
//获取元素的非行间样式值
     function getStyle(object,oCss) {
             if (object.currentStyle) {
                 return object.currentStyle[oCss];//IE
             }else{
                 return getComputedStyle(object,null)[oCss];//除了IE
             }
     }
复制代码
设置监听事件：

复制代码
//设置监听事件
     function addEvent(obj,type,fn){//添加事件监听，三个参数分别为 对象、事件类型、事件处理函数，默认为false
        if (obj.addEventListener) {
            obj.addEventListener(type,fn,false);//非IE
        } else{
            obj.attachEvent('on'+type,fn);//ie,这里已经加上on，传参的时候注意不要重复加了
        };
    }
    function removeEvent(obj,type,fn){//删除事件监听
        if (obj.removeEventListener) {
            obj.removeEventListener(type,fn,false);//非IE
        } else{
            obj.detachEvent('on'+type,fn);//ie，这里已经加上on，传参的时候注意不要重复加了
        };
    }
复制代码
元素到浏览器边缘的距离：

复制代码
//在这里加个元素到浏览器边缘的距离，很实用
    function offsetTL(obj){//获取元素内容距离浏览器边框的距离（含边框）
        var ofL=0,ofT=0;
        while(obj){
            ofL+=obj.offsetLeft+obj.clientLeft;
            ofT+=obj.offsetTop+obj.clientTop;
            obj=obj.offsetParent;
        }
        return{left:ofL,top:ofT};
    }
复制代码
阻止事件传播：

复制代码
//js阻止事件传播，这里使用click事件为例
    document.onclick=function(e){
        var e=e||window.event;
        if (e.stopPropagation) {
            e.stopPropagation();//W3C标准
        }else{
            e.cancelBubble=true;//IE....
        }
    }
复制代码
阻止默认事件：

复制代码
//js阻止默认事件
    document.onclick=function(e){
        var e=e||window.event;
        if (e.preventDefault) {
            e.preventDefault();//W3C标准
        }else{
            e.returnValue='false';//IE..
        }
    }
复制代码
关于EVENT事件中的target：

复制代码
//关于event事件中的target
    document.onmouseover=function(e){
        var e=e||window.event;
        var Target=e.target||e.srcElement;//获取target的兼容写法，后面的为IE
        var from=e.relatedTarget||e.formElement;//鼠标来的地方，同样后面的为IE...
        var to=e.relatedTarget||e.toElement;//鼠标去的地方
    }
复制代码
鼠标滚轮滚动事件：

复制代码
//鼠标滚轮事件
    //火狐中的滚轮事件
    document.addEventListener("DOMMouseScroll",function(event){
        alert(event.detail);//若前滚的话为 -3，后滚的话为 3
    },false)
    //非火狐中的滚轮事件
    document.onmousewheel=function(event){
        alert(event.detail);//前滚：120，后滚：-120
    }
复制代码
节点加载：

//火狐下特有的节点加载事件，就是节点加载完才执行，和onload不同
    //感觉用到的不多，直接把js代码放在页面结构后面一样能实现。。
    document.addEventListener('DOMContentLoaded',function ( ){},false);//DOM加载完成。好像除IE6-8都可以.





   </script>
 </body>
</html>
